// <auto-generated />
using System;
using API.Core.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Business.Models.ConfigurationPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingMonthEnd")
                        .HasColumnType("int");

                    b.Property<int>("BillingMonthStart")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaximumLeaveTimeInDays")
                        .HasColumnType("int");

                    b.Property<double>("PercentOfAdvancesAllowed")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("WarningBeforeCertificateExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforeLeaveReachesLimit")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforeMedicalCheckupExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforePassportExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforePermitExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforeSafetyTrainingExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforeVisaExpires")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationPage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingMonthEnd = 25,
                            BillingMonthStart = 26,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 22, 16, 20, 21, 905, DateTimeKind.Local).AddTicks(4528),
                            MaximumLeaveTimeInDays = 90,
                            PercentOfAdvancesAllowed = 75.0,
                            WarningBeforeCertificateExpires = 30,
                            WarningBeforeLeaveReachesLimit = 60,
                            WarningBeforeMedicalCheckupExpires = 30,
                            WarningBeforePassportExpires = 30,
                            WarningBeforePermitExpires = 30,
                            WarningBeforeSafetyTrainingExpires = 30,
                            WarningBeforeVisaExpires = 30
                        });
                });

            modelBuilder.Entity("API.Business.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequestedPasswordReset")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 22, 16, 20, 21, 901, DateTimeKind.Local).AddTicks(1525),
                            Email = "Jan.Kowalski@PersonelManager.pl",
                            FirstName = "Jan",
                            Hash = "WWW",
                            IsActive = true,
                            LastName = "Kowalski",
                            RequestedPasswordReset = false,
                            Role = "Kierownik"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 22, 16, 20, 21, 904, DateTimeKind.Local).AddTicks(2273),
                            Email = "Jan.Nowak@PersonelManager.pl",
                            FirstName = "Jan",
                            Hash = "YYY",
                            IsActive = true,
                            LastName = "Nowak",
                            RequestedPasswordReset = true,
                            Role = "Pracownik"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 22, 16, 20, 21, 904, DateTimeKind.Local).AddTicks(2341),
                            Email = "Maria.Niziolek@PersonelManager.pl",
                            FirstName = "Maria",
                            Hash = "ZZZ",
                            IsActive = false,
                            LastName = "Niziolek",
                            RequestedPasswordReset = false,
                            Role = "Pracownik"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Administrator",
                            FirstName = "Administrator",
                            Hash = "WSX_09",
                            IsActive = true,
                            LastName = "",
                            RequestedPasswordReset = false,
                            Role = "Administrator"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 9, 26, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(4809),
                            EmployeeId = 1,
                            IssuedBy = "Szkółka monterów Jastrząb",
                            Number = "PS/34/20",
                            Title = "Kurs palenia i szczepiania palnikiem gazowym",
                            ValidFrom = new DateTime(2018, 7, 22, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(4825),
                            ValidTo = new DateTime(2023, 7, 22, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(4829)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 1, 4, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(4847),
                            EmployeeId = 1,
                            IssuedBy = "DNV",
                            Number = "DNV/086/2020",
                            Title = "Placówka szkoleniowa spawaczy - Stocznia Gdańsk",
                            ValidFrom = new DateTime(2020, 1, 4, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(4850),
                            ValidTo = new DateTime(2023, 1, 3, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(4853)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 23, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(4856),
                            EmployeeId = 4,
                            IssuedBy = "Zakład szkolenia monterów w Harkowie",
                            Number = "HR/127/20",
                            Title = "Kurs palenia i szczepiania palnikiem gazowym",
                            ValidFrom = new DateTime(2016, 2, 23, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(4859),
                            ValidTo = new DateTime(2020, 8, 20, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(4862)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 9, 26, 16, 20, 21, 906, DateTimeKind.Local).AddTicks(2947),
                            DateOfBirth = new DateTime(1980, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Mariusz",
                            FirstName = "Maciej",
                            IsArchived = false,
                            MotherName = "Mariola",
                            Nationality = "Polska",
                            Pesel = "80012100000"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 906, DateTimeKind.Local).AddTicks(5526),
                            DateOfBirth = new DateTime(1997, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Vitalii",
                            FirstName = "Dmyto",
                            IsArchived = false,
                            MotherName = "Svetlana",
                            Nationality = "Ukraina",
                            Pesel = ""
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 906, DateTimeKind.Local).AddTicks(5591),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Oleksii",
                            FirstName = "Oleksandr",
                            IsArchived = false,
                            MotherName = "Oleksandra",
                            Nationality = "Ukraina",
                            Pesel = ""
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 23, 16, 20, 21, 906, DateTimeKind.Local).AddTicks(5596),
                            DateOfBirth = new DateTime(1997, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Maxim",
                            FirstName = "Yevhenii",
                            IsArchived = false,
                            MotherName = "Zlata",
                            Nationality = "Ukraina",
                            Pesel = "97022012345"
                        });
                });

            modelBuilder.Entity("API.HR.Models.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Kosokowo",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 9, 26, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(405),
                            Number = "26C",
                            Region = "Pomorze",
                            Street = "Rzemieślnicza",
                            Zip = "81-198"
                        },
                        new
                        {
                            Id = 2,
                            City = "Rumia",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(438),
                            Number = "20A",
                            Region = "Pomorze",
                            Street = "Świętopełka",
                            Zip = "84-230"
                        },
                        new
                        {
                            Id = 3,
                            City = "Gdynia",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(443),
                            Number = "6",
                            Region = "Pomorze",
                            Street = "Spokojna",
                            Zip = "81-549"
                        },
                        new
                        {
                            Id = 4,
                            City = "Gdańsk",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 1, 4, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(446),
                            Number = "12",
                            Region = "Pomorze",
                            Street = "Ks. Mariana Góreckiego",
                            Zip = "80-553"
                        },
                        new
                        {
                            Id = 5,
                            City = "Pogórze",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 23, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(449),
                            Number = "13",
                            Region = "Pomorze",
                            Street = "Wapienna",
                            Zip = "81-198"
                        },
                        new
                        {
                            Id = 6,
                            City = "Gdańsk",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 4, 13, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(453),
                            Number = "3-1",
                            Region = "Pomorze",
                            Street = "Nadmorski Dwór",
                            Zip = "80-506"
                        });
                });

            modelBuilder.Entity("API.HR.Models.EmployeeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeAddressId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ForemanId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeAddressId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ForemanId");

                    b.HasIndex("LocationId");

                    b.ToTable("EmployeesHistory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 9, 26, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(5952),
                            EmployeeAddressId = 1,
                            EmployeeId = 1,
                            ForemanId = 1,
                            LastName = "Maciejewski",
                            LocationId = 1,
                            PhoneNo = "608 767 878",
                            Profession = "Monter Okrętowy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(8918),
                            EmployeeAddressId = 2,
                            EmployeeId = 2,
                            ForemanId = 2,
                            LastName = "Kravchuk",
                            LocationId = 1,
                            PhoneNo = "982 280 556",
                            Profession = "Szlifierz Okrętowy"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(9000),
                            EmployeeAddressId = 3,
                            EmployeeId = 3,
                            ForemanId = 2,
                            LastName = "Kuchna",
                            LocationId = 1,
                            PhoneNo = "777 090 210",
                            Profession = "Szlifierz Okrętowy"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 1, 4, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(9004),
                            EmployeeAddressId = 4,
                            EmployeeId = 1,
                            ForemanId = 3,
                            LastName = "Maciejewski",
                            LocationId = 2,
                            Profession = "Spawacz Okrętowy"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 23, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(9008),
                            EmployeeAddressId = 5,
                            EmployeeId = 4,
                            ForemanId = 2,
                            LastName = "Yushchenko",
                            LocationId = 1,
                            PhoneNo = "606 852 298",
                            Profession = "Monter Okrętowy"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 4, 13, 16, 20, 21, 908, DateTimeKind.Local).AddTicks(9011),
                            EmployeeAddressId = 6,
                            EmployeeId = 1,
                            ForemanId = 3,
                            LastName = "Maciejewski",
                            LocationId = 2,
                            PhoneNo = "608 767 878",
                            Profession = "Spawacz Okrętowy"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Foreman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Foremen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 9, 26, 16, 20, 21, 907, DateTimeKind.Local).AddTicks(4261),
                            FirstName = "Grzegorz",
                            LastName = "Grzegorczuk",
                            LocationId = 1,
                            Mail = "G.Grzegorczuk@StoczniaGdynia.pl",
                            PhoneNo = "+58 608 385 512"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 907, DateTimeKind.Local).AddTicks(6305),
                            FirstName = "Jakub",
                            LastName = "Jakubczyk",
                            LocationId = 1,
                            Mail = "J.Jakubczyk@StoczniaGdynia.pl",
                            PhoneNo = "+58 608 385 513"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 1, 4, 16, 20, 21, 907, DateTimeKind.Local).AddTicks(6366),
                            FirstName = "Filip",
                            LastName = "Filipiak",
                            LocationId = 2,
                            Mail = "Filip.Filipiak@Remontowa.pl",
                            PhoneNo = "+58 808 100 001"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Urlop wypoczynkowy, 14 dni",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 912, DateTimeKind.Local).AddTicks(1597),
                            EmployeeId = 1,
                            From = new DateTime(2019, 12, 1, 16, 20, 21, 912, DateTimeKind.Local).AddTicks(2070),
                            To = new DateTime(2019, 12, 15, 16, 20, 21, 912, DateTimeKind.Local).AddTicks(2588),
                            Type = "Wypoczynkowy"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Urlop Administracyjny, wymiana paszporty, wizy",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 16, 16, 20, 21, 912, DateTimeKind.Local).AddTicks(3981),
                            EmployeeId = 2,
                            From = new DateTime(2020, 2, 23, 16, 20, 21, 912, DateTimeKind.Local).AddTicks(4001),
                            To = new DateTime(2020, 5, 3, 16, 20, 21, 912, DateTimeKind.Local).AddTicks(4010),
                            Type = "Administracyjny"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Obecność nieusprawiedliwiona",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 22, 16, 20, 21, 912, DateTimeKind.Local).AddTicks(4031),
                            EmployeeId = 1,
                            From = new DateTime(2020, 5, 22, 16, 20, 21, 912, DateTimeKind.Local).AddTicks(4034),
                            Type = "Nieusprawiedliwiony"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Gdynia",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 9, 26, 16, 20, 21, 906, DateTimeKind.Local).AddTicks(8529),
                            Name = "Stocznia Gdynia SA",
                            Number = "3",
                            Region = "Pomorze",
                            Street = "Czechosłowacka",
                            Zip = "81-336"
                        },
                        new
                        {
                            Id = 2,
                            City = "Gdańsk",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 907, DateTimeKind.Local).AddTicks(1362),
                            Name = "Stocznia Remontowa Gdańsk",
                            Number = "8",
                            Region = "Pomorze",
                            Street = "Swojska",
                            Zip = "80-958"
                        });
                });

            modelBuilder.Entity("API.HR.Models.MedicalCheckup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("MedicalCheckups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 9, 26, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(4048),
                            EmployeeId = 1,
                            IssuedBy = "Prywatna praktyka - Dr Kamiński",
                            Number = "MD/016/19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2018, 8, 20, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(5695),
                            ValidTo = new DateTime(2020, 8, 20, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(6193)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(6646),
                            EmployeeId = 2,
                            IssuedBy = "DiamentMed sp. z o.o.",
                            Number = "DM-076-19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2018, 8, 21, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(6704),
                            ValidTo = new DateTime(2020, 8, 21, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(6720)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(6729),
                            EmployeeId = 2,
                            IssuedBy = "DiamentMed sp. z o.o.",
                            Number = "DM-177-19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2018, 11, 14, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(6732),
                            ValidTo = new DateTime(2020, 11, 14, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(6735)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(6739),
                            EmployeeId = 2,
                            IssuedBy = "DiamentMed sp. z o.o.",
                            Number = "DM-178-19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2019, 2, 22, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(6742),
                            ValidTo = new DateTime(2021, 2, 22, 16, 20, 21, 909, DateTimeKind.Local).AddTicks(6745)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Passport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Passports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8780),
                            EmployeeId = 2,
                            IssuedBy = "Biuro Paszportowe w Kijowie",
                            Number = "UKR090909",
                            Title = "Paszport Ukraina",
                            ValidFrom = new DateTime(2010, 2, 22, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8797),
                            ValidTo = new DateTime(2020, 2, 23, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8801)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8820),
                            EmployeeId = 3,
                            IssuedBy = "Biuro Paszportowe w Harkowie",
                            Number = "HKR05409",
                            Title = "Paszport Ukraina",
                            ValidFrom = new DateTime(2019, 7, 22, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8823),
                            ValidTo = new DateTime(2029, 7, 22, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8826)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 23, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8830),
                            EmployeeId = 4,
                            IssuedBy = "Biuro Paszportowe w Lwowie",
                            Number = "LWR12309",
                            Title = "Paszport Ukraina",
                            ValidFrom = new DateTime(2010, 8, 20, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8832),
                            ValidTo = new DateTime(2049, 7, 22, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8836)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 3, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8839),
                            EmployeeId = 2,
                            IssuedBy = "Biuro Paszportowe w Kijowie",
                            Number = "UKR191919",
                            Title = "Paszport Ukraina",
                            ValidFrom = new DateTime(2020, 4, 13, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8842),
                            ValidTo = new DateTime(2030, 4, 13, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(8845)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Permit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationId");

                    b.ToTable("Permits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(7560),
                            EmployeeId = 2,
                            IssuedBy = "Panśtwowy Urząd Pracy w Gdyni",
                            LocationId = 1,
                            Number = "OSW/575/2019",
                            Title = "Oświadczenie o zamiarze powierzenia pracy",
                            ValidFrom = new DateTime(2019, 11, 15, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8026),
                            ValidTo = new DateTime(2020, 2, 23, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8039)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 23, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8057),
                            EmployeeId = 3,
                            IssuedBy = "Urząd wojewódzki w Gdańsku, wydział ds. cudzoziemców",
                            LocationId = 1,
                            Number = "KP/55/2020",
                            Title = "Karta Pobytu",
                            ValidFrom = new DateTime(2020, 2, 23, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8067),
                            ValidTo = new DateTime(2025, 2, 22, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8070)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 23, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8075),
                            EmployeeId = 4,
                            IssuedBy = "Urząd wojewódzki w Gdańsku, wydział ds. cudzoziemców",
                            LocationId = 1,
                            Number = "A/196/2020",
                            Title = "Zezwolenie na pracę typ A",
                            ValidFrom = new DateTime(2019, 8, 20, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8078),
                            ValidTo = new DateTime(2020, 8, 20, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8081)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 4, 13, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8084),
                            EmployeeId = 2,
                            IssuedBy = "Urząd wojewódzki w Gdańsku, wydział ds. cudzoziemców",
                            LocationId = 1,
                            Number = "A/216/2020",
                            Title = "Zezwolenie na pracę typ A",
                            ValidFrom = new DateTime(2020, 4, 13, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8087),
                            ValidTo = new DateTime(2023, 4, 13, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(8090)
                        });
                });

            modelBuilder.Entity("API.HR.Models.SafetyTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SafetyTrainings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 9, 26, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1424),
                            EmployeeId = 1,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/99/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2019, 9, 26, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1441),
                            ValidTo = new DateTime(2021, 9, 25, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1444)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1465),
                            EmployeeId = 2,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/339/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2019, 11, 15, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1469),
                            ValidTo = new DateTime(2021, 11, 14, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1471)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1475),
                            EmployeeId = 3,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/340/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2019, 11, 15, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1478),
                            ValidTo = new DateTime(2021, 11, 14, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1481)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 1, 4, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1484),
                            EmployeeId = 1,
                            IssuedBy = "Kierownik działu BHP - Ignacy Krasiński",
                            Number = "BHP-940-19",
                            Title = "Szkolenie Wstępne BHP - Stocznia Gdańsk",
                            ValidFrom = new DateTime(2020, 1, 4, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1487),
                            ValidTo = new DateTime(2021, 1, 3, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1489)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 1, 4, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1492),
                            EmployeeId = 4,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/440/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2020, 2, 23, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1495),
                            ValidTo = new DateTime(2022, 2, 22, 16, 20, 21, 910, DateTimeKind.Local).AddTicks(1497)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Visa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Visas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 11, 15, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3491),
                            EmployeeId = 2,
                            IssuedBy = "Konsul w Kijowie",
                            Number = "PL053452",
                            Title = "Wiza krajowa",
                            Type = "D",
                            ValidFrom = new DateTime(2019, 2, 22, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3521),
                            ValidTo = new DateTime(2020, 2, 23, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3526)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 23, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3538),
                            EmployeeId = 3,
                            IssuedBy = "Konsul w Kijowie",
                            Number = "PL053452",
                            Title = "Wiza krajowa",
                            Type = "D",
                            ValidFrom = new DateTime(2020, 2, 23, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3541),
                            ValidTo = new DateTime(2021, 2, 22, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3543)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 23, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3548),
                            EmployeeId = 4,
                            IssuedBy = "Konsul w Kijowie",
                            Number = "PL053452",
                            Title = "Wiza krajowa",
                            Type = "D",
                            ValidFrom = new DateTime(2019, 8, 20, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3551),
                            ValidTo = new DateTime(2020, 8, 20, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3554)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 3, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3557),
                            EmployeeId = 2,
                            IssuedBy = "Konsul w Kijowie",
                            Number = "PL053452",
                            Title = "Wiza krajowa",
                            Type = "D",
                            ValidFrom = new DateTime(2020, 4, 13, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3560),
                            ValidTo = new DateTime(2021, 4, 13, 16, 20, 21, 911, DateTimeKind.Local).AddTicks(3562)
                        });
                });

            modelBuilder.Entity("API.Payroll.Models.Advance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkedHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Advances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1100m,
                            ContractId = 14,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaidOn = new DateTime(2020, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkedHours = 70
                        },
                        new
                        {
                            Id = 2,
                            Amount = 900m,
                            ContractId = 15,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaidOn = new DateTime(2020, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkedHours = 80
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1000m,
                            ContractId = 16,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaidOn = new DateTime(2020, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkedHours = 86
                        },
                        new
                        {
                            Id = 4,
                            Amount = 2000m,
                            ContractId = 17,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 22, 16, 20, 21, 917, DateTimeKind.Local).AddTicks(5078),
                            WorkedHours = 10
                        },
                        new
                        {
                            Id = 5,
                            Amount = 2500m,
                            ContractId = 18,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 22, 16, 20, 21, 917, DateTimeKind.Local).AddTicks(5081),
                            WorkedHours = 10
                        },
                        new
                        {
                            Id = 6,
                            Amount = 500m,
                            ContractId = 19,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 22, 16, 20, 21, 917, DateTimeKind.Local).AddTicks(5084),
                            PaidOn = new DateTime(2020, 7, 22, 16, 20, 21, 917, DateTimeKind.Local).AddTicks(5087),
                            WorkedHours = 16
                        });
                });

            modelBuilder.Entity("API.Payroll.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsRealized")
                        .HasColumnType("bit");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractSubject = "Montaż obarierowania ochronnego na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2019, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "1/01/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za styczeń",
                            ValidFrom = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 2, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(6159),
                            Value = 4000m
                        },
                        new
                        {
                            Id = 2,
                            ContractSubject = "Przyspawanie wręgów 11-201 na jednostce WZ211",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/02/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za luty",
                            ValidFrom = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 3, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7457),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 3,
                            ContractSubject = "Oszlifowanie trapa na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/02/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za luty",
                            ValidFrom = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 3, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7523),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 4,
                            ContractSubject = "Oszlifowanie zbiornika ZL15",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "3/02/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za luty",
                            ValidFrom = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 3, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7544),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 5,
                            ContractSubject = "Przyspawanie wręgów 201-421 na jednostce WZ211",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/03/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za marzec",
                            ValidFrom = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 4, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7564),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 6,
                            ContractSubject = "Oszlifowanie schodów na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/03/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za marzec",
                            ValidFrom = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 4, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7583),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 7,
                            ContractSubject = "Wypalenie otworu technicznego 23 na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/03/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za marzec",
                            ValidFrom = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 4, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7602),
                            Value = 4000m
                        },
                        new
                        {
                            Id = 8,
                            ContractSubject = "Przyspawanie haków technocznych do płatu P11",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/04/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za kwiecień",
                            ValidFrom = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 5, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7622),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 9,
                            ContractSubject = "Oszlifowanie wręgów 11-201 na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/04/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za kwiecień",
                            ValidFrom = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 5, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7641),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 10,
                            ContractSubject = "Montaż trapu na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/04/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za kwiecień",
                            ValidFrom = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 5, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7660),
                            Value = 4000m
                        },
                        new
                        {
                            Id = 11,
                            ContractSubject = "Przyspawanie haków technocznych do płatu P12",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/05/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za maj",
                            ValidFrom = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 6, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7680),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 12,
                            ContractSubject = "Oszlifowanie wręgów 11-201 na jednostce NB231",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/05/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za maj",
                            ValidFrom = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 6, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7699),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 13,
                            ContractSubject = "Montaż trapu na jednostce NB231",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/05/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za maj",
                            ValidFrom = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 6, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7719),
                            Value = 4000m
                        },
                        new
                        {
                            Id = 14,
                            ContractSubject = "Przyspawanie sekcji okętowych NW23-NW24",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/06/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za czerwiec",
                            ValidFrom = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 7, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7738),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 15,
                            ContractSubject = "Oszlifowanie wręgów zbiorników wody pitnej P12-P32",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/06/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za czerwiec",
                            ValidFrom = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 7, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7757),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 16,
                            ContractSubject = "Montaż barierek ochronnych na jednostce NB231",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/06/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za czerwiec",
                            ValidFrom = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 7, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7820),
                            Value = 4000m
                        },
                        new
                        {
                            Id = 17,
                            ContractSubject = "Przyspawanie sekcji okętowych NW23-NW24",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = false,
                            Number = "1/07/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za lipiec",
                            ValidFrom = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 8, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7839),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 18,
                            ContractSubject = "Oszlifowanie wręgów zbiorników wody pitnej P12-P32",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = false,
                            Number = "2/07/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za lipiec",
                            ValidFrom = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 8, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7857),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 19,
                            ContractSubject = "Montaż barierek ochronnych na jednostce NB231",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = false,
                            Number = "3/07/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za lipiec",
                            ValidFrom = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 8, 21, 16, 20, 21, 916, DateTimeKind.Local).AddTicks(7875),
                            Value = 4000m
                        });
                });

            modelBuilder.Entity("API.Payroll.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GrossAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractId = 11,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 5000m,
                            NetAmount = 4300.00m,
                            PaidOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ContractId = 12,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 3000m,
                            NetAmount = 2580.00m,
                            PaidOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ContractId = 13,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 4000m,
                            NetAmount = 3440.00m,
                            PaidOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ContractId = 14,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 5000m,
                            NetAmount = 4300.00m,
                            PaidOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            ContractId = 15,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 3000m,
                            NetAmount = 2580.00m,
                            PaidOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ContractId = 16,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 4000m,
                            NetAmount = 3440.00m,
                            PaidOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Certificate", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Certificates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.EmployeeHistory", b =>
                {
                    b.HasOne("API.HR.Models.EmployeeAddress", "EmployeeAddress")
                        .WithMany()
                        .HasForeignKey("EmployeeAddressId");

                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("History")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.HR.Models.Foreman", "Foreman")
                        .WithMany()
                        .HasForeignKey("ForemanId");

                    b.HasOne("API.HR.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("API.HR.Models.Foreman", b =>
                {
                    b.HasOne("API.HR.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.Leave", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.MedicalCheckup", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("MedicalCheckups")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.Passport", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Passports")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.Permit", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Permits")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.HR.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.SafetyTraining", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("SafetyTrainings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.Visa", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Visas")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Payroll.Models.Advance", b =>
                {
                    b.HasOne("API.Payroll.Models.Contract", "Contract")
                        .WithMany("Advances")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Payroll.Models.Contract", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Payroll.Models.Payment", b =>
                {
                    b.HasOne("API.Payroll.Models.Contract", "Contract")
                        .WithOne("Payment")
                        .HasForeignKey("API.Payroll.Models.Payment", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
