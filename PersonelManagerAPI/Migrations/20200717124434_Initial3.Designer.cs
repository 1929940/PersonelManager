// <auto-generated />
using System;
using API.Core.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20200717124434_Initial3")]
    partial class Initial3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Business.Models.ConfigurationPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingMonthEnd")
                        .HasColumnType("int");

                    b.Property<int>("BillingMonthStart")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaximumLeaveTimeInDays")
                        .HasColumnType("int");

                    b.Property<double>("PercentOfAdvancesAllowed")
                        .HasColumnType("float");

                    b.Property<int>("WarningBeforeCertificateExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforeLeaveReachesLimit")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforeMedicalCheckupExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforePassportExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforePermitExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforeSafetyTrainingExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforeVisaExpires")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationPage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingMonthEnd = 25,
                            BillingMonthStart = 26,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 7, 17, 14, 44, 33, 439, DateTimeKind.Local).AddTicks(6809),
                            MaximumLeaveTimeInDays = 90,
                            PercentOfAdvancesAllowed = 75.0,
                            WarningBeforeCertificateExpires = 30,
                            WarningBeforeLeaveReachesLimit = 60,
                            WarningBeforeMedicalCheckupExpires = 30,
                            WarningBeforePassportExpires = 30,
                            WarningBeforePermitExpires = 30,
                            WarningBeforeSafetyTrainingExpires = 30,
                            WarningBeforeVisaExpires = 30
                        });
                });

            modelBuilder.Entity("API.Business.Models.Credential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequestedPasswordReset")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Credential");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 7, 17, 14, 44, 33, 435, DateTimeKind.Local).AddTicks(6455),
                            Email = "Jan.Kowalski@PersonelManager.pl",
                            FirstName = "Jan",
                            Hash = "WWW",
                            IsActive = true,
                            LastName = "Kowalski",
                            RequestedPasswordReset = false
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 7, 17, 14, 44, 33, 438, DateTimeKind.Local).AddTicks(3631),
                            Email = "Jan.Nowak@PersonelManager.pl",
                            FirstName = "Jan",
                            Hash = "YYY",
                            IsActive = true,
                            LastName = "Nowak",
                            RequestedPasswordReset = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 7, 17, 14, 44, 33, 438, DateTimeKind.Local).AddTicks(3695),
                            Email = "Maria.Niziolek@PersonelManager.pl",
                            FirstName = "Maria",
                            Hash = "ZZZ",
                            IsActive = false,
                            LastName = "Niziolek",
                            RequestedPasswordReset = false
                        });
                });

            modelBuilder.Entity("API.HR.Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Certificate");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 9, 21, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(6731),
                            EmployeeId = 1,
                            IssuedBy = "Szkółka monterów Jastrząb",
                            Number = "PS/34/20",
                            Title = "Kurs palenia i szczepiania palnikiem gazowym",
                            ValidFrom = new DateTime(2018, 7, 17, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(6747),
                            ValidTo = new DateTime(2023, 7, 17, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(6752)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 12, 30, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(6768),
                            EmployeeId = 1,
                            IssuedBy = "DNV",
                            Number = "DNV/086/2020",
                            Title = "Placówka szkoleniowa spawaczy - Stocznia Gdańsk",
                            ValidFrom = new DateTime(2019, 12, 30, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(6771),
                            ValidTo = new DateTime(2022, 12, 29, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(6774)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 18, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(6777),
                            EmployeeId = 4,
                            IssuedBy = "Zakład szkolenia monterów w Harkowie",
                            Number = "HR/127/20",
                            Title = "Kurs palenia i szczepiania palnikiem gazowym",
                            ValidFrom = new DateTime(2016, 2, 18, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(6780),
                            ValidTo = new DateTime(2020, 8, 15, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(6782)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfBirth = new DateTime(1980, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Mariusz",
                            FirstName = "Maciej",
                            IsArchived = false,
                            MotherName = "Mariola",
                            Nationality = "Polska",
                            Pesel = "80012100000"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfBirth = new DateTime(1997, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Vitalii",
                            FirstName = "Dmyto",
                            IsArchived = false,
                            MotherName = "Svetlana",
                            Nationality = "Ukraina",
                            Pesel = ""
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Oleksii",
                            FirstName = "Oleksandr",
                            IsArchived = false,
                            MotherName = "Oleksandra",
                            Nationality = "Ukraina",
                            Pesel = ""
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 18, 0, 0, 0, 0, DateTimeKind.Local),
                            DateOfBirth = new DateTime(1997, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Maxim",
                            FirstName = "Yevhenii",
                            IsArchived = false,
                            MotherName = "Zlata",
                            Nationality = "Ukraina",
                            Pesel = "97022012345"
                        });
                });

            modelBuilder.Entity("API.HR.Models.EmployeeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeAddress");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Kosokowo",
                            Country = "Polska",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 9, 21, 14, 44, 33, 442, DateTimeKind.Local).AddTicks(2725),
                            Number = "26C",
                            Region = "Pomorze",
                            Street = "Rzemieślnicza",
                            Zip = "81-198"
                        },
                        new
                        {
                            Id = 2,
                            City = "Rumia",
                            Country = "Polska",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 442, DateTimeKind.Local).AddTicks(2757),
                            Number = "20A",
                            Region = "Pomorze",
                            Street = "Świętopełka",
                            Zip = "84-230"
                        },
                        new
                        {
                            Id = 3,
                            City = "Gdynia",
                            Country = "Polska",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 442, DateTimeKind.Local).AddTicks(2761),
                            Number = "6",
                            Region = "Pomorze",
                            Street = "Spokojna",
                            Zip = "81-549"
                        },
                        new
                        {
                            Id = 4,
                            City = "Gdańsk",
                            Country = "Polska",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 12, 30, 14, 44, 33, 442, DateTimeKind.Local).AddTicks(2764),
                            Number = "12",
                            Region = "Pomorze",
                            Street = "Ks. Mariana Góreckiego",
                            Zip = "80-553"
                        },
                        new
                        {
                            Id = 5,
                            City = "Pogórze",
                            Country = "Polska",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 18, 14, 44, 33, 442, DateTimeKind.Local).AddTicks(2767),
                            Number = "13",
                            Region = "Pomorze",
                            Street = "Wapienna",
                            Zip = "81-198"
                        },
                        new
                        {
                            Id = 6,
                            City = "Gdańsk",
                            Country = "Polska",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 4, 8, 14, 44, 33, 442, DateTimeKind.Local).AddTicks(2770),
                            Number = "3-1",
                            Region = "Pomorze",
                            Street = "Nadmorski Dwór",
                            Zip = "80-506"
                        });
                });

            modelBuilder.Entity("API.HR.Models.EmployeeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeAddressId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ForemanId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeAddressId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ForemanId");

                    b.HasIndex("LocationId");

                    b.ToTable("EmployeeHistory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 9, 21, 14, 44, 33, 442, DateTimeKind.Local).AddTicks(7730),
                            EmployeeAddressId = 1,
                            EmployeeId = 1,
                            ForemanId = 1,
                            LastName = "Maciejewski",
                            LocationId = 1,
                            Profession = "Monter Okrętowy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(368),
                            EmployeeAddressId = 2,
                            EmployeeId = 2,
                            ForemanId = 2,
                            LastName = "Kravchuk",
                            LocationId = 1,
                            Profession = "Szlifierz Okrętowy"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(435),
                            EmployeeAddressId = 3,
                            EmployeeId = 3,
                            ForemanId = 2,
                            LastName = "Kuchna",
                            LocationId = 1,
                            Profession = "Szlifierz Okrętowy"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 12, 30, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(487),
                            EmployeeAddressId = 4,
                            EmployeeId = 1,
                            ForemanId = 3,
                            LastName = "Maciejewski",
                            LocationId = 2,
                            Profession = "Spawacz Okrętowy"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 18, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(492),
                            EmployeeAddressId = 5,
                            EmployeeId = 4,
                            ForemanId = 2,
                            LastName = "Yushchenko",
                            LocationId = 1,
                            Profession = "Monter Okrętowy"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 4, 8, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(495),
                            EmployeeAddressId = 6,
                            EmployeeId = 1,
                            ForemanId = 3,
                            LastName = "Maciejewski",
                            LocationId = 2,
                            Profession = "Spawacz Okrętowy"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Foreman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Foreman");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 9, 21, 14, 44, 33, 441, DateTimeKind.Local).AddTicks(6146),
                            FirstName = "Grzegorz",
                            LastName = "Grzegorczuk",
                            LocationId = 1,
                            Mail = "G.Grzegorczuk@StoczniaGdynia.pl",
                            PhoneNo = "+58 608 385 512"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 441, DateTimeKind.Local).AddTicks(8581),
                            FirstName = "Jakub",
                            LastName = "Jakubczyk",
                            LocationId = 1,
                            Mail = "J.Jakubczyk@StoczniaGdynia.pl",
                            PhoneNo = "+58 608 385 513"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 12, 30, 14, 44, 33, 441, DateTimeKind.Local).AddTicks(8624),
                            FirstName = "Filip",
                            LastName = "Filipiak",
                            LocationId = 2,
                            Mail = "Filip.Filipiak@Remontowa.pl",
                            PhoneNo = "+58 808 100 001"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leave");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Urlop wypoczynkowy, 14 dni",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(3457),
                            EmployeeId = 1,
                            From = new DateTime(2019, 11, 26, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(3930),
                            To = new DateTime(2019, 12, 10, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(4458),
                            Type = "Wypoczynkowy"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Urlop Administracyjny, wymiana paszporty, wizy",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 11, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(5889),
                            EmployeeId = 2,
                            From = new DateTime(2020, 2, 18, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(5907),
                            To = new DateTime(2020, 4, 28, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(5915),
                            Type = "Administracyjny"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Obecność nieusprawiedliwiona",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 5, 17, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(5936),
                            EmployeeId = 1,
                            From = new DateTime(2020, 5, 17, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(5938),
                            Type = "Nieusprawiedliwiony"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Gdynia",
                            Country = "Polska",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 9, 21, 14, 44, 33, 441, DateTimeKind.Local).AddTicks(552),
                            Name = "Stocznia Gdynia SA",
                            Number = "3",
                            Region = "Pomorze",
                            Street = "Czechosłowacka",
                            Zip = "81-336"
                        },
                        new
                        {
                            Id = 2,
                            City = "Gdańsk",
                            Country = "Polska",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 441, DateTimeKind.Local).AddTicks(3391),
                            Name = "Stocznia Remontowa Gdańsk",
                            Number = "8",
                            Region = "Pomorze",
                            Street = "Swojska",
                            Zip = "80-958"
                        });
                });

            modelBuilder.Entity("API.HR.Models.MedicalCheckup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("MedicalCheckup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 9, 21, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(5093),
                            EmployeeId = 1,
                            IssuedBy = "Prywatna praktyka - Dr Kamiński",
                            Number = "MD/016/19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2018, 8, 15, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(6766),
                            ValidTo = new DateTime(2020, 8, 15, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(7271)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(7722),
                            EmployeeId = 2,
                            IssuedBy = "DiamentMed sp. z o.o.",
                            Number = "DM-076-19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2018, 8, 16, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(7759),
                            ValidTo = new DateTime(2020, 8, 16, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(7773)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(7782),
                            EmployeeId = 2,
                            IssuedBy = "DiamentMed sp. z o.o.",
                            Number = "DM-177-19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2018, 11, 9, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(7785),
                            ValidTo = new DateTime(2020, 11, 9, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(7788)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(7792),
                            EmployeeId = 2,
                            IssuedBy = "DiamentMed sp. z o.o.",
                            Number = "DM-178-19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2019, 2, 17, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(7795),
                            ValidTo = new DateTime(2021, 2, 17, 14, 44, 33, 443, DateTimeKind.Local).AddTicks(7798)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Passport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Passport");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(724),
                            EmployeeId = 2,
                            IssuedBy = "Biuro Paszportowe w Kijowie",
                            Number = "UKR090909",
                            Title = "Paszport Ukraina",
                            ValidFrom = new DateTime(2010, 2, 17, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(739),
                            ValidTo = new DateTime(2020, 2, 18, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(744)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(762),
                            EmployeeId = 3,
                            IssuedBy = "Biuro Paszportowe w Harkowie",
                            Number = "HKR05409",
                            Title = "Paszport Ukraina",
                            ValidFrom = new DateTime(2019, 7, 17, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(765),
                            ValidTo = new DateTime(2029, 7, 17, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(768)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 18, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(772),
                            EmployeeId = 4,
                            IssuedBy = "Biuro Paszportowe w Lwowie",
                            Number = "LWR12309",
                            Title = "Paszport Ukraina",
                            ValidFrom = new DateTime(2010, 8, 15, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(775),
                            ValidTo = new DateTime(2049, 7, 17, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(777)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 4, 28, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(780),
                            EmployeeId = 2,
                            IssuedBy = "Biuro Paszportowe w Kijowie",
                            Number = "UKR191919",
                            Title = "Paszport Ukraina",
                            ValidFrom = new DateTime(2020, 4, 8, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(783),
                            ValidTo = new DateTime(2030, 4, 8, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(786)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Permit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationId");

                    b.ToTable("Permit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(9484),
                            EmployeeId = 2,
                            IssuedBy = "Panśtwowy Urząd Pracy w Gdyni",
                            LocationId = 1,
                            Number = "OSW/575/2019",
                            Title = "Oświadczenie o zamiarze powierzenia pracy",
                            ValidFrom = new DateTime(2019, 11, 10, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(9956),
                            ValidTo = new DateTime(2020, 2, 18, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(9969)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 18, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(9986),
                            EmployeeId = 3,
                            IssuedBy = "Urząd wojewódzki w Gdańsku, wydział ds. cudzoziemców",
                            LocationId = 1,
                            Number = "KP/55/2020",
                            Title = "Karta Pobytu",
                            ValidFrom = new DateTime(2020, 2, 18, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(9995),
                            ValidTo = new DateTime(2025, 2, 17, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(9997)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 18, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(2),
                            EmployeeId = 4,
                            IssuedBy = "Urząd wojewódzki w Gdańsku, wydział ds. cudzoziemców",
                            LocationId = 1,
                            Number = "A/196/2020",
                            Title = "Zezwolenie na pracę typ A",
                            ValidFrom = new DateTime(2019, 8, 15, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(5),
                            ValidTo = new DateTime(2020, 8, 15, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(8)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 4, 8, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(11),
                            EmployeeId = 2,
                            IssuedBy = "Urząd wojewódzki w Gdańsku, wydział ds. cudzoziemców",
                            LocationId = 1,
                            Number = "A/216/2020",
                            Title = "Zezwolenie na pracę typ A",
                            ValidFrom = new DateTime(2020, 4, 8, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(14),
                            ValidTo = new DateTime(2023, 4, 8, 14, 44, 33, 446, DateTimeKind.Local).AddTicks(16)
                        });
                });

            modelBuilder.Entity("API.HR.Models.SafetyTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SafetyTraining");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 9, 21, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2286),
                            EmployeeId = 1,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/99/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2019, 9, 21, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2302),
                            ValidTo = new DateTime(2021, 9, 20, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2305)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2323),
                            EmployeeId = 2,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/339/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2019, 11, 10, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2327),
                            ValidTo = new DateTime(2021, 11, 9, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2329)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2333),
                            EmployeeId = 3,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/340/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2019, 11, 10, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2336),
                            ValidTo = new DateTime(2021, 11, 9, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2338)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 12, 30, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2341),
                            EmployeeId = 1,
                            IssuedBy = "Kierownik działu BHP - Ignacy Krasiński",
                            Number = "BHP-940-19",
                            Title = "Szkolenie Wstępne BHP - Stocznia Gdańsk",
                            ValidFrom = new DateTime(2019, 12, 30, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2344),
                            ValidTo = new DateTime(2020, 12, 29, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2346)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 12, 30, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2349),
                            EmployeeId = 4,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/440/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2020, 2, 18, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2352),
                            ValidTo = new DateTime(2022, 2, 17, 14, 44, 33, 444, DateTimeKind.Local).AddTicks(2354)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Visa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Visa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 11, 10, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5346),
                            EmployeeId = 2,
                            IssuedBy = "Konsul w Kijowie",
                            Number = "PL053452",
                            Title = "Wiza krajowa",
                            Type = "D",
                            ValidFrom = new DateTime(2019, 2, 17, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5375),
                            ValidTo = new DateTime(2020, 2, 18, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5380)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 18, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5409),
                            EmployeeId = 3,
                            IssuedBy = "Konsul w Kijowie",
                            Number = "PL053452",
                            Title = "Wiza krajowa",
                            Type = "D",
                            ValidFrom = new DateTime(2020, 2, 18, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5412),
                            ValidTo = new DateTime(2021, 2, 17, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5415)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 18, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5418),
                            EmployeeId = 4,
                            IssuedBy = "Konsul w Kijowie",
                            Number = "PL053452",
                            Title = "Wiza krajowa",
                            Type = "D",
                            ValidFrom = new DateTime(2019, 8, 15, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5421),
                            ValidTo = new DateTime(2020, 8, 15, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5424)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 4, 28, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5427),
                            EmployeeId = 2,
                            IssuedBy = "Konsul w Kijowie",
                            Number = "PL053452",
                            Title = "Wiza krajowa",
                            Type = "D",
                            ValidFrom = new DateTime(2020, 4, 8, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5430),
                            ValidTo = new DateTime(2021, 4, 8, 14, 44, 33, 445, DateTimeKind.Local).AddTicks(5433)
                        });
                });

            modelBuilder.Entity("API.Payroll.Models.Advances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkedHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Advances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1100m,
                            ContractId = 14,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaidOn = new DateTime(2020, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkedHours = 70
                        },
                        new
                        {
                            Id = 2,
                            Amount = 900m,
                            ContractId = 15,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaidOn = new DateTime(2020, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkedHours = 80
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1000m,
                            ContractId = 16,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaidOn = new DateTime(2020, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkedHours = 86
                        },
                        new
                        {
                            Id = 4,
                            Amount = 2000m,
                            ContractId = 17,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 7, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WorkedHours = 10
                        },
                        new
                        {
                            Id = 5,
                            Amount = 2500m,
                            ContractId = 18,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 7, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WorkedHours = 10
                        },
                        new
                        {
                            Id = 6,
                            Amount = 500m,
                            ContractId = 19,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 7, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            PaidOn = new DateTime(2020, 7, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            WorkedHours = 16
                        });
                });

            modelBuilder.Entity("API.Payroll.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsRealized")
                        .HasColumnType("bit");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Contract");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractSubject = "Montaż obarierowania ochronnego na jednostce NB230",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2019, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "1/01/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za styczeń",
                            ValidFrom = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 2, 16, 14, 44, 33, 450, DateTimeKind.Local).AddTicks(9954),
                            Value = 4000m
                        },
                        new
                        {
                            Id = 2,
                            ContractSubject = "Przyspawanie wręgów 11-201 na jednostce WZ211",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/02/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za luty",
                            ValidFrom = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 3, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1269),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 3,
                            ContractSubject = "Oszlifowanie trapa na jednostce NB230",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/02/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za luty",
                            ValidFrom = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 3, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1304),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 4,
                            ContractSubject = "Oszlifowanie zbiornika ZL15",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 1, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "3/02/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za luty",
                            ValidFrom = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 3, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1324),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 5,
                            ContractSubject = "Przyspawanie wręgów 201-421 na jednostce WZ211",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/03/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za marzec",
                            ValidFrom = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 4, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1344),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 6,
                            ContractSubject = "Oszlifowanie schodów na jednostce NB230",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/03/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za marzec",
                            ValidFrom = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 4, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1363),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 7,
                            ContractSubject = "Wypalenie otworu technicznego 23 na jednostce NB230",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/03/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za marzec",
                            ValidFrom = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 4, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1382),
                            Value = 4000m
                        },
                        new
                        {
                            Id = 8,
                            ContractSubject = "Przyspawanie haków technocznych do płatu P11",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/04/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za kwiecień",
                            ValidFrom = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 5, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1401),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 9,
                            ContractSubject = "Oszlifowanie wręgów 11-201 na jednostce NB230",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/04/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za kwiecień",
                            ValidFrom = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 5, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1420),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 10,
                            ContractSubject = "Montaż trapu na jednostce NB230",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/04/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za kwiecień",
                            ValidFrom = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 5, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1439),
                            Value = 4000m
                        },
                        new
                        {
                            Id = 11,
                            ContractSubject = "Przyspawanie haków technocznych do płatu P12",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/05/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za maj",
                            ValidFrom = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 6, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1506),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 12,
                            ContractSubject = "Oszlifowanie wręgów 11-201 na jednostce NB231",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/05/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za maj",
                            ValidFrom = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 6, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1527),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 13,
                            ContractSubject = "Montaż trapu na jednostce NB231",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/05/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za maj",
                            ValidFrom = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 6, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1546),
                            Value = 4000m
                        },
                        new
                        {
                            Id = 14,
                            ContractSubject = "Przyspawanie sekcji okętowych NW23-NW24",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/06/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za czerwiec",
                            ValidFrom = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 7, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1566),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 15,
                            ContractSubject = "Oszlifowanie wręgów zbiorników wody pitnej P12-P32",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/06/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za czerwiec",
                            ValidFrom = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 7, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1585),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 16,
                            ContractSubject = "Montaż barierek ochronnych na jednostce NB231",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/06/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za czerwiec",
                            ValidFrom = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 7, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1604),
                            Value = 4000m
                        },
                        new
                        {
                            Id = 17,
                            ContractSubject = "Przyspawanie sekcji okętowych NW23-NW24",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = false,
                            Number = "1/07/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za lipiec",
                            ValidFrom = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 8, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1622),
                            Value = 5000m
                        },
                        new
                        {
                            Id = 18,
                            ContractSubject = "Oszlifowanie wręgów zbiorników wody pitnej P12-P32",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = false,
                            Number = "2/07/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za lipiec",
                            ValidFrom = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 8, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1640),
                            Value = 3000m
                        },
                        new
                        {
                            Id = 19,
                            ContractSubject = "Montaż barierek ochronnych na jednostce NB231",
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = false,
                            Number = "3/07/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za lipiec",
                            ValidFrom = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 8, 16, 14, 44, 33, 451, DateTimeKind.Local).AddTicks(1658),
                            Value = 4000m
                        });
                });

            modelBuilder.Entity("API.Payroll.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GrossAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaidOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Payment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractId = 11,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 5000m,
                            NetAmount = 4300.00m,
                            PaidOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ContractId = 12,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 3000m,
                            NetAmount = 2580.00m,
                            PaidOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ContractId = 13,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 4000m,
                            NetAmount = 3440.00m,
                            PaidOn = new DateTime(2020, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ContractId = 14,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 5000m,
                            NetAmount = 4300.00m,
                            PaidOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            ContractId = 15,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 3000m,
                            NetAmount = 2580.00m,
                            PaidOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ContractId = 16,
                            CreatedBy = "Administrator",
                            CreatedOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GrossAmount = 4000m,
                            NetAmount = 3440.00m,
                            PaidOn = new DateTime(2020, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Certificate", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Certificates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.EmployeeHistory", b =>
                {
                    b.HasOne("API.HR.Models.EmployeeAddress", "EmployeeAddress")
                        .WithMany()
                        .HasForeignKey("EmployeeAddressId");

                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("History")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.HR.Models.Foreman", "Foreman")
                        .WithMany()
                        .HasForeignKey("ForemanId");

                    b.HasOne("API.HR.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("API.HR.Models.Foreman", b =>
                {
                    b.HasOne("API.HR.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.Leave", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.MedicalCheckup", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("MedicalCheckups")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.Passport", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Passports")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.Permit", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Permits")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.HR.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.SafetyTraining", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("SafetyTrainings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.Visa", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Visas")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Payroll.Models.Advances", b =>
                {
                    b.HasOne("API.Payroll.Models.Contract", "Contract")
                        .WithMany("Advances")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Payroll.Models.Contract", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Payroll.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId");
                });

            modelBuilder.Entity("API.Payroll.Models.Payment", b =>
                {
                    b.HasOne("API.Payroll.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
