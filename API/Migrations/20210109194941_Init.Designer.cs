// <auto-generated />
using System;
using API.Core.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210109194941_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Business.Models.ConfigurationPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillingMonthEnd")
                        .HasColumnType("int");

                    b.Property<int>("BillingMonthStart")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("PercentOfAdvancesAllowed")
                        .HasColumnType("float");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("WarningBeforeCertificateExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforeMedicalCheckupExpires")
                        .HasColumnType("int");

                    b.Property<int>("WarningBeforeSafetyTrainingExpires")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConfigurationPage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingMonthEnd = 25,
                            BillingMonthStart = 26,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2021, 1, 9, 20, 49, 41, 48, DateTimeKind.Local).AddTicks(7500),
                            PercentOfAdvancesAllowed = 75.0,
                            WarningBeforeCertificateExpires = 30,
                            WarningBeforeMedicalCheckupExpires = 30,
                            WarningBeforeSafetyTrainingExpires = 30
                        });
                });

            modelBuilder.Entity("API.Business.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequestedPasswordReset")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2021, 1, 9, 20, 49, 41, 44, DateTimeKind.Local).AddTicks(992),
                            Email = "Jan.Kowalski@PersonelManager.pl",
                            FirstName = "Jan",
                            Hash = "ECC1DD30FAE7C0D8A891953B0DCF883ECAE21ECD0576BF9E00B3A279AB351BA3",
                            IsActive = true,
                            LastName = "Kowalski",
                            RequestedPasswordReset = true,
                            Role = "Kierownik"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2021, 1, 9, 20, 49, 41, 47, DateTimeKind.Local).AddTicks(2580),
                            Email = "Jan.Nowak@PersonelManager.pl",
                            FirstName = "Jan",
                            Hash = "ECC1DD30FAE7C0D8A891953B0DCF883ECAE21ECD0576BF9E00B3A279AB351BA3",
                            IsActive = true,
                            LastName = "Nowak",
                            RequestedPasswordReset = false,
                            Role = "Pracownik"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2021, 1, 9, 20, 49, 41, 47, DateTimeKind.Local).AddTicks(2657),
                            Email = "Maria.Niziolek@PersonelManager.pl",
                            FirstName = "Maria",
                            Hash = "ECC1DD30FAE7C0D8A891953B0DCF883ECAE21ECD0576BF9E00B3A279AB351BA3",
                            IsActive = false,
                            LastName = "Niziolek",
                            RequestedPasswordReset = true,
                            Role = "Pracownik"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "1929940@gmail.com",
                            FirstName = "Administrator",
                            Hash = "ECC1DD30FAE7C0D8A891953B0DCF883ECAE21ECD0576BF9E00B3A279AB351BA3",
                            IsActive = true,
                            LastName = "",
                            RequestedPasswordReset = false,
                            Role = "Administrator"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@pm-tester.pl",
                            FirstName = "Tester1",
                            Hash = "ECC1DD30FAE7C0D8A891953B0DCF883ECAE21ECD0576BF9E00B3A279AB351BA3",
                            IsActive = true,
                            LastName = "Admin",
                            RequestedPasswordReset = false,
                            Role = "Administrator"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "manager@pm-tester.pl",
                            FirstName = "Tester2",
                            Hash = "ECC1DD30FAE7C0D8A891953B0DCF883ECAE21ECD0576BF9E00B3A279AB351BA3",
                            IsActive = true,
                            LastName = "Manager",
                            RequestedPasswordReset = false,
                            Role = "Kierownik"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "employee@pm-tester.pl",
                            FirstName = "Tester3",
                            Hash = "ECC1DD30FAE7C0D8A891953B0DCF883ECAE21ECD0576BF9E00B3A279AB351BA3",
                            IsActive = true,
                            LastName = "Employee",
                            RequestedPasswordReset = false,
                            Role = "Pracownik"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "inactive@pm-tester.pl",
                            FirstName = "Tester4",
                            Hash = "ECC1DD30FAE7C0D8A891953B0DCF883ECAE21ECD0576BF9E00B3A279AB351BA3",
                            IsActive = false,
                            LastName = "Employee",
                            RequestedPasswordReset = false,
                            Role = "Pracownik"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 3, 15, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(3242),
                            EmployeeId = 1,
                            IssuedBy = "Szkółka monterów Jastrząb",
                            Number = "PS/34/20",
                            Title = "Kurs palenia i szczepiania palnikiem gazowym",
                            ValidFrom = new DateTime(2019, 1, 9, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(3258),
                            ValidTo = new DateTime(2024, 1, 9, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(3263)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 23, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(3281),
                            EmployeeId = 1,
                            IssuedBy = "DNV",
                            Number = "DNV/086/2020",
                            Title = "Placówka szkoleniowa spawaczy - Stocznia Gdańsk",
                            ValidFrom = new DateTime(2020, 6, 23, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(3284),
                            ValidTo = new DateTime(2023, 6, 23, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(3287)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 8, 12, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(3290),
                            EmployeeId = 4,
                            IssuedBy = "Zakład szkolenia monterów w Harkowie",
                            Number = "HR/127/20",
                            Title = "Kurs palenia i szczepiania palnikiem gazowym",
                            ValidFrom = new DateTime(2016, 8, 12, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(3293),
                            ValidTo = new DateTime(2021, 2, 7, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(3296)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pesel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 3, 15, 20, 49, 41, 49, DateTimeKind.Local).AddTicks(4363),
                            DateOfBirth = new DateTime(1980, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Mariusz",
                            FirstName = "Maciej",
                            IsArchived = false,
                            MotherName = "Mariola",
                            Nationality = "Polska",
                            Pesel = "80012100000"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 49, DateTimeKind.Local).AddTicks(6988),
                            DateOfBirth = new DateTime(1997, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Vitalii",
                            FirstName = "Dmyto",
                            IsArchived = false,
                            MotherName = "Svetlana",
                            Nationality = "Ukraina",
                            Pesel = ""
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 49, DateTimeKind.Local).AddTicks(7049),
                            DateOfBirth = new DateTime(1993, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Oleksii",
                            FirstName = "Oleksandr",
                            IsArchived = false,
                            MotherName = "Oleksandra",
                            Nationality = "Ukraina",
                            Pesel = ""
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 8, 12, 20, 49, 41, 49, DateTimeKind.Local).AddTicks(7054),
                            DateOfBirth = new DateTime(1997, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "Maxim",
                            FirstName = "Yevhenii",
                            IsArchived = false,
                            MotherName = "Zlata",
                            Nationality = "Ukraina",
                            Pesel = "97022012345"
                        });
                });

            modelBuilder.Entity("API.HR.Models.EmployeeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ForemanId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ForemanId");

                    b.HasIndex("LocationId");

                    b.ToTable("EmployeesHistory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Kosokowo",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 3, 15, 20, 49, 41, 51, DateTimeKind.Local).AddTicks(4460),
                            EmployeeId = 1,
                            ForemanId = 1,
                            LastName = "Maciejewski",
                            LocationId = 1,
                            Number = "26C",
                            PhoneNo = "608 767 878",
                            Profession = "Monter Okrętowy",
                            Region = "Pomorze",
                            Street = "Rzemieślnicza",
                            Zip = "81-198"
                        },
                        new
                        {
                            Id = 2,
                            City = "Rumia",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 51, DateTimeKind.Local).AddTicks(7127),
                            EmployeeId = 2,
                            ForemanId = 2,
                            LastName = "Kravchuk",
                            LocationId = 1,
                            Number = "20A",
                            PhoneNo = "982 280 556",
                            Profession = "Szlifierz Okrętowy",
                            Region = "Pomorze",
                            Street = "Świętopełka",
                            Zip = "84-230"
                        },
                        new
                        {
                            Id = 3,
                            City = "Gdynia",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 51, DateTimeKind.Local).AddTicks(7185),
                            EmployeeId = 3,
                            ForemanId = 2,
                            LastName = "Kuchna",
                            LocationId = 1,
                            Number = "6",
                            PhoneNo = "777 090 210",
                            Profession = "Szlifierz Okrętowy",
                            Region = "Pomorze",
                            Street = "Spokojna",
                            Zip = "81-549"
                        },
                        new
                        {
                            Id = 4,
                            City = "Gdańsk",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 23, 20, 49, 41, 51, DateTimeKind.Local).AddTicks(7190),
                            EmployeeId = 1,
                            ForemanId = 3,
                            LastName = "Maciejewski",
                            LocationId = 2,
                            Number = "12",
                            Profession = "Spawacz Okrętowy",
                            Region = "Pomorze",
                            Street = "Ks. Mariana Góreckiego",
                            Zip = "80-553"
                        },
                        new
                        {
                            Id = 5,
                            City = "Pogórze",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 8, 12, 20, 49, 41, 51, DateTimeKind.Local).AddTicks(7194),
                            EmployeeId = 4,
                            ForemanId = 2,
                            LastName = "Yushchenko",
                            LocationId = 1,
                            Number = "13",
                            PhoneNo = "606 852 298",
                            Profession = "Monter Okrętowy",
                            Region = "Pomorze",
                            Street = "Wapienna",
                            Zip = "81-198"
                        },
                        new
                        {
                            Id = 6,
                            City = "Gdańsk",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 10, 1, 20, 49, 41, 51, DateTimeKind.Local).AddTicks(7197),
                            EmployeeId = 1,
                            ForemanId = 3,
                            LastName = "Maciejewski",
                            LocationId = 2,
                            Number = "3-1",
                            PhoneNo = "608 767 878",
                            Profession = "Spawacz Okrętowy",
                            Region = "Pomorze",
                            Street = "Nadmorski Dwór",
                            Zip = "80-506"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Foreman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Foremen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 3, 15, 20, 49, 41, 50, DateTimeKind.Local).AddTicks(5793),
                            FirstName = "Grzegorz",
                            LastName = "Grzegorczuk",
                            LocationId = 1,
                            Mail = "G.Grzegorczuk@StoczniaGdynia.pl",
                            PhoneNo = "+58 608 385 512"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 50, DateTimeKind.Local).AddTicks(7908),
                            FirstName = "Jakub",
                            LastName = "Jakubczyk",
                            LocationId = 1,
                            Mail = "J.Jakubczyk@StoczniaGdynia.pl",
                            PhoneNo = "+58 608 385 513"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 23, 20, 49, 41, 50, DateTimeKind.Local).AddTicks(7967),
                            FirstName = "Filip",
                            LastName = "Filipiak",
                            LocationId = 2,
                            Mail = "Filip.Filipiak@Remontowa.pl",
                            PhoneNo = "+58 808 100 001"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Urlop wypoczynkowy, 14 dni",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(7246),
                            EmployeeId = 1,
                            From = new DateTime(2020, 5, 20, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(7721),
                            To = new DateTime(2020, 6, 3, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(8207),
                            Type = "Wypoczynkowy"
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Urlop Administracyjny, wymiana paszporty, wizy",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 8, 5, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(9647),
                            EmployeeId = 2,
                            From = new DateTime(2020, 8, 12, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(9665),
                            To = new DateTime(2020, 10, 21, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(9676),
                            Type = "Administracyjny"
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Obecność nieusprawiedliwiona",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 11, 9, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(9698),
                            EmployeeId = 1,
                            From = new DateTime(2020, 11, 9, 20, 49, 41, 53, DateTimeKind.Local).AddTicks(9701),
                            Type = "Nieusprawiedliwiony"
                        });
                });

            modelBuilder.Entity("API.HR.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Gdynia",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 3, 15, 20, 49, 41, 50, DateTimeKind.Local).AddTicks(57),
                            Name = "Stocznia Gdynia SA",
                            Number = "3",
                            Region = "Pomorze",
                            Street = "Czechosłowacka",
                            Zip = "81-336"
                        },
                        new
                        {
                            Id = 2,
                            City = "Gdańsk",
                            Country = "Polska",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 50, DateTimeKind.Local).AddTicks(2887),
                            Name = "Stocznia Remontowa Gdańsk",
                            Number = "8",
                            Region = "Pomorze",
                            Street = "Swojska",
                            Zip = "80-958"
                        });
                });

            modelBuilder.Entity("API.HR.Models.MedicalCheckup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("MedicalCheckups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 3, 15, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(2235),
                            EmployeeId = 1,
                            IssuedBy = "Prywatna praktyka - Dr Kamiński",
                            Number = "MD/016/19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2019, 2, 7, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(4019),
                            ValidTo = new DateTime(2021, 2, 7, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(4560)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(5053),
                            EmployeeId = 2,
                            IssuedBy = "DiamentMed sp. z o.o.",
                            Number = "DM-076-19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2019, 2, 8, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(5107),
                            ValidTo = new DateTime(2021, 2, 8, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(5122)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(5131),
                            EmployeeId = 2,
                            IssuedBy = "DiamentMed sp. z o.o.",
                            Number = "DM-177-19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2019, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(5134),
                            ValidTo = new DateTime(2021, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(5138)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(5142),
                            EmployeeId = 2,
                            IssuedBy = "DiamentMed sp. z o.o.",
                            Number = "DM-178-19",
                            Title = "Badanie lekarskie wstępne",
                            ValidFrom = new DateTime(2019, 8, 12, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(5144),
                            ValidTo = new DateTime(2021, 8, 12, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(5147)
                        });
                });

            modelBuilder.Entity("API.HR.Models.SafetyTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SafetyTrainings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 3, 15, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9779),
                            EmployeeId = 1,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/99/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2020, 3, 15, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9795),
                            ValidTo = new DateTime(2022, 3, 15, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9798)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9817),
                            EmployeeId = 2,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/339/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2020, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9820),
                            ValidTo = new DateTime(2022, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9823)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9827),
                            EmployeeId = 3,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/340/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2020, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9829),
                            ValidTo = new DateTime(2022, 5, 4, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9832)
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 23, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9835),
                            EmployeeId = 1,
                            IssuedBy = "Kierownik działu BHP - Ignacy Krasiński",
                            Number = "BHP-940-19",
                            Title = "Szkolenie Wstępne BHP - Stocznia Gdańsk",
                            ValidFrom = new DateTime(2020, 6, 23, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9837),
                            ValidTo = new DateTime(2021, 6, 23, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9840)
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 23, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9843),
                            EmployeeId = 4,
                            IssuedBy = "Dział BHP - Stocznia Gdynia",
                            Number = "BHP/440/19",
                            Title = "Szkolenie BHP - Stocznia Gdynia",
                            ValidFrom = new DateTime(2020, 8, 12, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9846),
                            ValidTo = new DateTime(2022, 8, 12, 20, 49, 41, 52, DateTimeKind.Local).AddTicks(9848)
                        });
                });

            modelBuilder.Entity("API.Payroll.Models.Advance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkedHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Advances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1100m,
                            ContractId = 14,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaidOn = new DateTime(2020, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkedHours = 70
                        },
                        new
                        {
                            Id = 2,
                            Amount = 900m,
                            ContractId = 15,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaidOn = new DateTime(2020, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkedHours = 80
                        },
                        new
                        {
                            Id = 3,
                            Amount = 1000m,
                            ContractId = 16,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaidOn = new DateTime(2020, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkedHours = 86
                        },
                        new
                        {
                            Id = 4,
                            Amount = 2000m,
                            ContractId = 17,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2021, 1, 9, 20, 49, 41, 59, DateTimeKind.Local).AddTicks(2179),
                            WorkedHours = 10
                        },
                        new
                        {
                            Id = 5,
                            Amount = 2500m,
                            ContractId = 18,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2021, 1, 9, 20, 49, 41, 59, DateTimeKind.Local).AddTicks(2182),
                            WorkedHours = 10
                        },
                        new
                        {
                            Id = 6,
                            Amount = 500m,
                            ContractId = 19,
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2021, 1, 9, 20, 49, 41, 59, DateTimeKind.Local).AddTicks(2185),
                            PaidOn = new DateTime(2021, 1, 9, 20, 49, 41, 59, DateTimeKind.Local).AddTicks(2188),
                            WorkedHours = 16
                        });
                });

            modelBuilder.Entity("API.Payroll.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContractSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlySalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsRealized")
                        .HasColumnType("bit");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaidOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContractSubject = "Montaż obarierowania ochronnego na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "1/07/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za lipiec",
                            TotalValue = 4000m,
                            ValidFrom = new DateTime(2020, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 8, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(2711)
                        },
                        new
                        {
                            Id = 2,
                            ContractSubject = "Przyspawanie wręgów 11-201 na jednostce WZ211",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/08/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za sierpień",
                            TotalValue = 5000m,
                            ValidFrom = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 9, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4039)
                        },
                        new
                        {
                            Id = 3,
                            ContractSubject = "Oszlifowanie trapa na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/08/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za sierpień",
                            TotalValue = 3000m,
                            ValidFrom = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 9, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4076)
                        },
                        new
                        {
                            Id = 4,
                            ContractSubject = "Oszlifowanie zbiornika ZL15",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "3/08/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za sierpień",
                            TotalValue = 3000m,
                            ValidFrom = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 9, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4097)
                        },
                        new
                        {
                            Id = 5,
                            ContractSubject = "Przyspawanie wręgów 201-421 na jednostce WZ211",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/09/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za wrzesień",
                            TotalValue = 5000m,
                            ValidFrom = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 10, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4116)
                        },
                        new
                        {
                            Id = 6,
                            ContractSubject = "Oszlifowanie schodów na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/09/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za wrzesień",
                            TotalValue = 3000m,
                            ValidFrom = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 10, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4135)
                        },
                        new
                        {
                            Id = 7,
                            ContractSubject = "Wypalenie otworu technicznego 23 na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/09/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za wrzesień",
                            TotalValue = 4000m,
                            ValidFrom = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 10, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4154)
                        },
                        new
                        {
                            Id = 8,
                            ContractSubject = "Przyspawanie haków technocznych do płatu P11",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/10/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za październik",
                            TotalValue = 5000m,
                            ValidFrom = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 11, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4173)
                        },
                        new
                        {
                            Id = 9,
                            ContractSubject = "Oszlifowanie wręgów 11-201 na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/10/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za październik",
                            TotalValue = 3000m,
                            ValidFrom = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 11, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4192)
                        },
                        new
                        {
                            Id = 10,
                            ContractSubject = "Montaż trapu na jednostce NB230",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/10/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za październik",
                            TotalValue = 4000m,
                            ValidFrom = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 11, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4211)
                        },
                        new
                        {
                            Id = 11,
                            ContractSubject = "Przyspawanie haków technocznych do płatu P12",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/11/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za listopad",
                            TotalValue = 5000m,
                            ValidFrom = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 12, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4230)
                        },
                        new
                        {
                            Id = 12,
                            ContractSubject = "Oszlifowanie wręgów 11-201 na jednostce NB231",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/11/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za listopad",
                            TotalValue = 3000m,
                            ValidFrom = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 12, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4249)
                        },
                        new
                        {
                            Id = 13,
                            ContractSubject = "Montaż trapu na jednostce NB231",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/11/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za listopad",
                            TotalValue = 4000m,
                            ValidFrom = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2020, 12, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4268)
                        },
                        new
                        {
                            Id = 14,
                            ContractSubject = "Przyspawanie sekcji okętowych NW23-NW24",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = true,
                            Number = "1/12/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za grudzień",
                            TotalValue = 5000m,
                            ValidFrom = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2021, 1, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4410)
                        },
                        new
                        {
                            Id = 15,
                            ContractSubject = "Oszlifowanie wręgów zbiorników wody pitnej P12-P32",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = true,
                            Number = "2/12/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za grudzień",
                            TotalValue = 3000m,
                            ValidFrom = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2021, 1, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4429)
                        },
                        new
                        {
                            Id = 16,
                            ContractSubject = "Montaż barierek ochronnych na jednostce NB231",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = true,
                            Number = "3/12/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za grudzień",
                            TotalValue = 4000m,
                            ValidFrom = new DateTime(2020, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2021, 1, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4448)
                        },
                        new
                        {
                            Id = 17,
                            ContractSubject = "Przyspawanie sekcji okętowych NW23-NW24",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 1,
                            HourlySalary = 25m,
                            IsRealized = false,
                            Number = "1/01/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za styczeń",
                            TotalValue = 5000m,
                            ValidFrom = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2021, 2, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4466)
                        },
                        new
                        {
                            Id = 18,
                            ContractSubject = "Oszlifowanie wręgów zbiorników wody pitnej P12-P32",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            HourlySalary = 15m,
                            IsRealized = false,
                            Number = "2/01/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za styczeń",
                            TotalValue = 3000m,
                            ValidFrom = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2021, 2, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4484)
                        },
                        new
                        {
                            Id = 19,
                            ContractSubject = "Montaż barierek ochronnych na jednostce NB231",
                            CreatedBy = "Initial",
                            CreatedOn = new DateTime(2020, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            HourlySalary = 20m,
                            IsRealized = false,
                            Number = "3/01/2020",
                            TaxPercent = 14.0m,
                            Title = "Umowa za styczeń",
                            TotalValue = 4000m,
                            ValidFrom = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidTo = new DateTime(2021, 2, 8, 20, 49, 41, 58, DateTimeKind.Local).AddTicks(4502)
                        });
                });

            modelBuilder.Entity("API.HR.Models.Certificate", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Certificates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.EmployeeHistory", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("History")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.HR.Models.Foreman", "Foreman")
                        .WithMany()
                        .HasForeignKey("ForemanId");

                    b.HasOne("API.HR.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("API.HR.Models.Foreman", b =>
                {
                    b.HasOne("API.HR.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.Leave", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Leaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.MedicalCheckup", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("MedicalCheckups")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.HR.Models.SafetyTraining", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("SafetyTrainings")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Payroll.Models.Advance", b =>
                {
                    b.HasOne("API.Payroll.Models.Contract", "Contract")
                        .WithMany("Advances")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Payroll.Models.Contract", b =>
                {
                    b.HasOne("API.HR.Models.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
